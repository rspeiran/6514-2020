// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6514.irecharge.subsystems;


import org.usfirst.frc6514.irecharge.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import edu.wpi.first.wpilibj.DriverStation;


/**
 *
 */
public class ControlPanelSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark controlPanelMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double ControlPanelRotationSpeed = 0.4;
    private double ControlPanelRotationSpeedStop = 0;


    public ControlPanelSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        controlPanelMotor = new Spark(6);
        addChild("ControlPanelMotor",controlPanelMotor);
        controlPanelMotor.setInverted(false);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void ControlPanelRotateCounterClockwise() {
        controlPanelMotor.set(ControlPanelRotationSpeed);

    }

    public void ControlPanelRotateClockwise() {
        controlPanelMotor.set(-1 * ControlPanelRotationSpeed);

    }

    public void ControlPanelRotationStop() {
        controlPanelMotor.set(ControlPanelRotationSpeedStop);

    }

    public String GetGameData() {
        String gameDataReturn;
        String gameData;
        gameData = DriverStation.getInstance().getGameSpecificMessage();
        if(gameData.length() > 0) {

            switch (gameData.charAt(0))
            {
                case 'B' :
                gameDataReturn = "B";
                break;

                case 'G' :
                gameDataReturn = "G";
                break;
                
                case 'R' :
                gameDataReturn = "R";
                break;
                
                case 'Y' :
                gameDataReturn = "Y";
                break;
                
                default :
                System.out.println("[][][][][][][][][][] ERROR GAME DATA [][][][][][][][][][]][][[]");
                gameDataReturn = "ERROR";
                break;
            }
        } else {
            gameDataReturn = "NoDataYet";
        }

        return gameDataReturn;
    }


}

