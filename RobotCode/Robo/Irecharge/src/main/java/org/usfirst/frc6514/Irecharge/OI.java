// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6514.irecharge;

import org.usfirst.frc6514.irecharge.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6514.irecharge.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton btnDriverHippoExtend;
    public JoystickButton btnDriverRetract;
    public JoystickButton btnDriverLift;
    public JoystickButton btnDriverLiftStop;
    public Joystick joystickDriver;
    public JoystickButton btnShooterShoot;
    public JoystickButton btnShooterShootStop;
    public Joystick joystickShooter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickShooter = new Joystick(1);
        
        btnShooterShootStop = new JoystickButton(joystickShooter, 1);
        btnShooterShootStop.whenReleased(new ShootStop());
        btnShooterShoot = new JoystickButton(joystickShooter, 1);
        btnShooterShoot.whenPressed(new Shoot());
        joystickDriver = new Joystick(0);
        
        btnDriverLiftStop = new JoystickButton(joystickDriver, 2);
        btnDriverLiftStop.whenReleased(new LiftStop());
        btnDriverLift = new JoystickButton(joystickDriver, 2);
        btnDriverLift.whenPressed(new InstantCommand1());
        btnDriverRetract = new JoystickButton(joystickDriver, 1);
        btnDriverRetract.whenPressed(new HippoRetract());
        btnDriverHippoExtend = new JoystickButton(joystickDriver, 1);
        btnDriverHippoExtend.whenPressed(new HippoExtend());


        // SmartDashboard Buttons
        SmartDashboard.putData("Auto1", new Auto1());
        SmartDashboard.putData("Auto2", new Auto2());
        SmartDashboard.putData("Auto3", new Auto3());
        SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());
        SmartDashboard.putData("Instant Command 1", new InstantCommand1());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("ShootStop", new ShootStop());
        SmartDashboard.putData("HippoExtend", new HippoExtend());
        SmartDashboard.putData("HippoRetract", new HippoRetract());
        SmartDashboard.putData("HippoReverse", new HippoReverse());
        SmartDashboard.putData("LiftUp", new LiftUp());
        SmartDashboard.putData("LiftStop", new LiftStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickDriver() {
        return joystickDriver;
    }

    public Joystick getJoystickShooter() {
        return joystickShooter;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

